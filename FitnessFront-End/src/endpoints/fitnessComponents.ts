/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useFitnessContext, FitnessContext } from "./fitnessContext";
import type * as Fetcher from "./fitnessFetcher";
import { fitnessFetch } from "./fitnessFetcher";
import type * as Schemas from "./fitnessSchemas";

export type MemberGetError = Fetcher.ErrorWrapper<undefined>;

export type MemberGetResponse = Schemas.Member[];

export type MemberGetVariables = FitnessContext["fetcherOptions"];

export const fetchMemberGet = (
  variables: MemberGetVariables,
  signal?: AbortSignal,
) =>
  fitnessFetch<MemberGetResponse, MemberGetError, undefined, {}, {}, {}>({
    url: "/api/Member",
    method: "get",
    ...variables,
    signal,
  });

export const useMemberGet = <TData = MemberGetResponse,>(
  variables: MemberGetVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<MemberGetResponse, MemberGetError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useFitnessContext(options);
  return reactQuery.useQuery<MemberGetResponse, MemberGetError, TData>({
    queryKey: queryKeyFn({
      path: "/api/Member",
      operationId: "memberGet",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchMemberGet({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation = {
  path: "/api/Member";
  operationId: "memberGet";
  variables: MemberGetVariables;
};
